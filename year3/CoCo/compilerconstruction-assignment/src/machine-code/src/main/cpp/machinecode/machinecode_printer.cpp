/*
_ _ _ ____ ____ _  _ _ _  _ ____     ___  ____    _  _ ____ ___
| | | |__| |__/ |\ | | |\ | | __ .   |  \ |  |    |\ | |  |  |
|_|_| |  | |  \ | \| | | \| |__] .   |__/ |__|    | \| |__|  |

____ _  _ ____ _  _ ____ ____    ____ _ _    ____   /
|    |__| |__| |\ | | __ |___    |___ | |    |___  /
|___ |  | |  | | \| |__] |___    |    | |___ |___ .
*/

#include <generator.h>
#include <fstream>
#include <errorcodes.h>
#include "machinecode_printer.h"

void machinecode::generator::print_main(std::ostream& stream, MachineCode& mc) {
    stream      << "# Output generated by the CoCo compiler" << std::endl
                << ".globl main" << std::endl
                << "main:" << std::endl
                << "\t\t# Output of function \'main\'" << std::endl
                << "\t\tpushq\t\t%rbp" << std::endl
                << "\t\tmovq\t\t%rsp,%rbp" << std::endl
                << "\t\tsubq\t\t$" << mc.get_allocated() << ",%rsp" << std::endl;
                for (const auto& instruction : mc)
                    stream << instruction << std::endl;
    stream      << "\t\tmov\t\t\t$0,%rax" << std::endl
                << "\t\tleave" << std::endl
                << "\t\tret" << std::endl;
}

void machinecode::generator::print_builtins(std::ostream& stream) {
    stream      << ".LC0:" << std::endl
                << "\t\t.string\t\"%d\\n\"" << std::endl
                << "\t\t.globl\twriteinteger" << std::endl
                << "writeinteger:" << std::endl
                << "\t\tpushq\t%rbp" << std::endl
                << "\t\tmovl\t%edi, %esi" << std::endl
                << "\t\tleaq\t.LC0(%rip), %rdi" << std::endl
                << "\t\tcall\tprintf" << std::endl
                << "\t\tpopq\t%rbp" << std::endl
                << "\t\tret" << std::endl;
    stream      << ".LC1:" << std::endl
                << "\t\t.string \"%u\\n\"" << std::endl
                << "\t\t.globl writeunsigned" << std::endl
                << "writeunsigned:" << std::endl
                << "\t\tpushq\t%rbp" << std::endl
                << "\t\tmovl\t%edi, %esi" << std::endl
                << "\t\tleaq\t.LC3(%rip), %rdi" << std::endl
                << "\t\tcall\tprintf" << std::endl
                << "\t\tpopq\t%rbp" << std::endl
                << "\t\tret" << std::endl;
    stream      << ".LC2:" << std::endl
                << "\t\t.string\t\"%d\\n\"" << std::endl
                << "\t\t.globl\twriteint8" << std::endl
                << "writeint8:" << std::endl
                << "\t\tpushq\t%rbp" << std::endl
                << "\t\tmovsx\t%dil, %esi" << std::endl
                << "\t\tleaq\t.LC0(%rip), %rdi" << std::endl
                << "\t\tcall\tprintf" << std::endl
                << "\t\tpopq\t%rbp" << std::endl
                << "\t\tret" << std::endl;
    stream      << ".LC3:" << std::endl
                << "\t\t.string \"%u\\n\"" << std::endl
                << "\t\t.globl writeuint8" << std::endl
                << "writeuint8:" << std::endl
                << "\t\tpushq\t%rbp" << std::endl
                << "\t\tmovzx\t%dil, %esi" << std::endl
                << "\t\tleaq\t.LC3(%rip), %rdi" << std::endl
                << "\t\tcall\tprintf" << std::endl
                << "\t\tpopq\t%rbp" << std::endl
                << "\t\tret" << std::endl;
}

int machinecode::generator::generate(Logger& logger, SymbolTable& table, const std::string& inputFilePath, std::ostream& stream) {
    // STAGE 1: Parse Tree
    std::unique_ptr<SyntaxTree> tree = nullptr;
    grammar::generator::generate(inputFilePath, logger, table, tree);
    if (tree == nullptr || logger.n_errors())
        return GRAMMAR_ERROR;

    // STAGE 2: intermediate-code
    IntermediateCode ic(*tree, logger, table);
    if (logger.n_errors())
        return IC_ERROR;

    // STAGE 3: machine-code
    MachineCode mc(logger, ic);
    if (logger.n_errors())
        return MC_ERROR;

    print_main(stream, mc);
    print_builtins(stream);
    return 0;
}

int machinecode::generator::generate(Logger& logger, SymbolTable& table, const std::string& inputFilePath, const std::string& outputFilePath)  {
    std::ofstream writer(outputFilePath);
    if (!writer.is_open()) {
        logger.error(-1) << "Could not open file: " << outputFilePath << "\n";
        return IO_ERROR;
    }
    return generate(logger, table, inputFilePath, writer);
}